(!require("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!require("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("Biostrings")
mySequenceFile<-System.file("sequence.gb","sequence-5.gb","sequence-4.gb",s"sequence-3.gb","sequence-2.gb","egfr_flank.fasta")
mySequenceFile <- system.file("egfr_flank.fasta")
eadDNAStringSet(sequence.gb)
readDNAStringSet(sequence.gb)
mySequenceFile <- system.file(Bioinformatics)
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb","sequence-4.gb","sequence-3.gb","sequence-2.gb","egfr_flank.fasta", package="msa")
mySequences <- readAAStringSet(mySequenceFile)
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb","sequence-4.gb","sequence-3.gb","sequence-2.gb","egfr_flank.fasta", package="msa")
> mySequences <- (mySequenceFile)
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb","sequence-4.gb","sequence-3.gb","sequence-2.gb","egfr_flank.fasta", package="msa")
> mySequences <- (mySequenceFile)
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb","sequence-4.gb","sequence-3.gb","sequence-2.gb","egfr_flank.fasta", package="msa")
library(msa)
library(seqinr)
library(seqinr)
library("seqinr")
install.packages("seqinr")
if(!require("BiocManager",quietly+TRUE))
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::instal("Biostrings")
BiocManager::install("Biostrings")
library(seqinr)
library(seqinr)
library("seqinr")
force=TRUE
BiocManager::install("Biostrings",force=TRUE)
library("BiocManager")
install.packages("seqinr")
library("seqinr")
library("seqinr")
library("rMSA")
?rMSA_INSTALL
'??rMSA_INSTALL'
BiocManager::install("msa",force=TRUE)
library("rMSA")
library("msa")
library("msa")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
BiocManager
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("examples", "exampleAA.fasta", package="msa")
mySequences
mySequences <- readAAStringSet(mySequenceFile)
eadDNAStringSet(sequence.gb)
readDNAStringSet(sequence.gb)
?readDNAStringSet()
readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-4.gb")
readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-4.fasta")
readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-5.fasta")
readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-4.fasta")
readDNAStringSet("/Users/MariaGarcia/Downloads/sequence.fasta")
c
(combine)
sequences<-c("sequence-5.fasta","sequence-4.fasta","sequence-3.fasta","sequence-2.fasta","sequence.fasta")
?(combine)
(combine)
sequences<-c(sequence-5.fasta,sequence-4.fasta,sequence-3.fasta,sequence-2.fasta,sequence.fasta)
sequences<-c("sequence-5.fasta","sequence-4.fasta","sequence-3.fasta","sequence-2.fasta","sequence.fasta")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
?combine
combine("sequence-5.fasta","sequence-4.fasta","sequence-3.fasta","sequence-2.fasta","sequence.fasta")
sequences<-c("sequence-5.fasta","sequence-4.fasta","sequence-3.fasta","sequence-2.fasta","sequence.fasta")
combine("sequence-5.fasta","sequence-4.fasta","sequence-3.fasta","sequence-2.fasta","sequence.fasta")
sequence1 <- readDNAStringSet("/Users/MariaGarcia/Downloads/sequence.fasta")
sequence1
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
sequences <- readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-2.fasta")
sequence-2
sequence2 <- readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-2.fasta")
sequence2
sequence3 <- readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-3.fasta")
sequence4 <- readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-4.fasta")
sequence5 <- readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-5.fasta")
sequence5
sequences<-c(sequence1,sequence2,sequence3,sequence4,sequence5)
ClustalW?
ClustalW ?
ClustalW
? ClustalW
msaClustalW(aequence1,aequence2,sequence3,sequence4,sequence5, cluster="default", gapOpening="default",
gapExtension="default", maxiters="default",
substitutionMatrix="default", type="default",
order=c("aligned", "input"), verbose=FALSE,
help=FALSE, ...)
msaClustalW(sequence1,sequence2,sequence3,sequence4,sequence5)
myFirstAlignment <-msaClustalW(sequence1,sequence2,sequence3,sequence4,sequence5)
myFirstAlignment <-msa(mySequences)
myFirstAlignment
print(myFirstAlignment,show="complete")
msaPrettyPrint(myFirstAlignment,output="pdf",shownames="none",showLogo ="none", askForOverwrite =FALSE,verbose = FALSE  )
msaPrettyPrint(myFirstAlignment,output="pdf",shownames="none",showLogo ="none", askForOverwrite =FALSE,verbose =FALSE  )
msaPrettyPrint(myFirstAlignment,output="pdf",shownames="none",showLogo ="none", askForOverwrite =FALSE,verbose =FALSE)
msaPrettyPrint(myFirstAlignment, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(myFirstAlignment, output="pdf", showNames="sequence1,sequence2,sequence3,sequence4,sequence5",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(myFirstAlignment, sequence1), output="asis",
myClustalWAlignment <- msa(mySequences, "ClustalW")
myClustalWAlignment
myClustalOmegaAlignment <- msa(mySequences, "ClustalOmega")
myFastaAlignment <- msa(mySequences, "Fasta")
library("msa")
sequence 2 <- readDNAString
library("seqinr")
if(!require("BiocManager",quietly+TRUE))
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
mySequenceFile <- system.file("sequence.gb", "sequence-5.gb", package="msa")
library(msa)
library(Biostrings)
library(sequir)
library(seqinr)
library(Biostrings)
library(tidyr)
library(dplyr)
library(tidyr)
library(dplyr)
setwd("/Users/MariaGarcia/Downloads/sequence.fasta")
seq_1 <- readDNAStringSet("sequence.fasta")
seq_1 <- readDNAStringSet(sequence.fasta)
seq1 <- readDNAStringSet("/Users/MariaGarcia/Downloads/sequence.fasta")
seq1
seq2 <- readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-2.fasta")
seq2
seq3 <- readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-3.fasta")
seq4 <- readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-4.fasta")
seq5 <- readDNAStringSet("/Users/MariaGarcia/Downloads/sequence-5.fasta")
seqs <- c(seq1,seq2,seq3,seq4,seq5)
seqs <- c(seq1,seq2,seq3,seq4,seq5)
seqs <- c(seq1,seq2,seq3,seq4,seq5)
seqs
nchar(seqs)
alFreq <- alphabetFrequency(seqs)
print(seqs, show="complete")
alFreq <- alphabetFrequency(seqs)
alFreq
GC <- sum(alFreq[,"C"]) + sum(alFreq[,"G"])
GC <- sum(alFreq[,"C"]) + sum(alFreq[,"G"])
AT <- sum(alFreq[,"A"]) + sum(alFreq[,"T"])
AT <- sum(alFreq[,"A"]) + sum(alFreq[,"T"])
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
# calculate the GC content a different way, using the 'GC' function in the seqinr package
# we can only run this on one sample at a time, so let's read in the first sample using the
# read.fasta() function in the seqinr package
# note that because there are multiple 'read.fasta()' functions, we need to specify that
# want to use the one in the seqinr package using the double colon
seq_1.seqinr <- seqinr::read.fasta("Diomedea_exulans/sequence_1.fasta")
seqs <- c(seq1,seq2,seq3,seq4,seq5)
seqs
names(sequences) <- c("S77384.1 cytochrome","FN431808.1 Squatina africana","FN431807.1 Squatina africana","FN431806.1 Squatina africana","FN431805.1 Squatina africana")
sequences
SqAfr <-msa(sequences)
nchar(SqAfr)
alFreq(SqAfr)
alFreq <- alphabetFrequency(SqAfr)
GC <- sum(alFreq[,"C"]) + sum(alFreq[,"G"])
AT <- sum(alFreq[,"A"]) + sum(alFreq[,"T"])
alphabetFrequency(SqAfr)
GC <- sum(alFreq[,"C"]) + sum(alFreq[,"G"])
sum(alFreq[,"C"]) + sum(alFreq[,"G"])
sum(alFreq[,"A"]) + sum(alFreq[,"T"])
GC / (GC + AT )
seq_1.seqinr <- seqinr::read.fasta("sequence.fasta")
seqinr::read.fasta("sequence.fasta")
seqinr::GC(seq_1.seqinr$S77384.1 cytochrome)
seqinr::GC(seq_1.seqinr$S77384.1)
d <- dist.alignment(AqAfr, "identity")
d <- dist.alignment(SqAfr, "identity")
SqAfr <- msaConvert(SqAfr, type="seqinr::alignment")
d <- dist.alignment(SqAfr, "identity")
d
100 - (round(as.matrix(d)[, "S77384.1 cytochrome", drop=FALSE], digits = 2) * 100)
100 - (round(as.matrix(d)[, "FN431808.1", drop=FALSE], digits = 2) * 100)
seq_1_AA <- Biostrings::translate(seq_1)
seq_1_AA <- Biostrings::translate(seq1)
seq_1_A <- Biostrings::translate(seq1)
print(seq_1_AA)
SqAfr <- msaConvert(SqAfr, type="phangorn::phyDat")
seqinr::read.fasta("sequence-2.fasta")
seqinr::GC(seq_1.seqinr$FN431808.1)
seqinr::read.fasta("sequence-3.fasta")
seqinr::GC(seq_1.seqinr$FN431807.1)
seqinr::GC(seq_2.seqinr$FN431807.1)
rite.phyDat(SqAfr, "sequence.fasta", format = "fasta")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
?msa
SqAfr <-msa(sequences)
nchar(SqAfr)
print(seqs, show="complete")
print(seqs, show="complete")
alphabetFrequency(SqAfr)
print(albatrossAln, show="complete") # here, you can also calculate the number of gaps by hand, or use the next step
?ClustalW
?Clustal
??Clustal
msaClustalW(SqAfr, cluster="default", gapOpening="default",
gapExtension="default", maxiters="default",
substitutionMatrix="default", type="default",
order=c("aligned", "input"), verbose=FALSE,
help=FALSE, ...)
msaClustalW(SqAfr, cluster="default")
msaClustalW(SqAfr)
msaClustalW(SqAfr)
alFreq(SqAfr)
alFreq(SqAfr)
alphabetFrequency(SqAfr)
print(seqs, show="complete")
print(seqs, show="complete")
print(seqs, show="complete")
print(seqs, show="complete")
alphabetFrequency(SqAfr)
alphabetFrequency(SqAfr)
print(seqs, show="complete")
?alignment leght
sum(alFreq[,"C"]) + sum(alFreq[,"G"])
sum(alFreq[,"A"]) + sum(alFreq[,"T"])
GC / (GC + AT )
Alignment_phyDat <- msaConvert(Alignment, type="phangorn::phyDat") write.phyDat(Alignment_phyDat, "alignment.fasta", format = "fasta")
msaConvert(Alignment, type="phangorn::phyDat") write.phyDat(Alignment_phyDat, "alignment.fasta", format = "fasta")
SqAfr_phyDat <- msaConvert(SqAfr, type="phangorn::phyDat")
write.phyDat(SqAfr_phyDat, "sequence.fasta", format = "fasta")
write.phyDat(SqAfr_phyDat, "seq1", format = "fasta")
write.phyDat(SqAfr_phyDat, "sequence.fasta", format = "fasta")
write.phyDat(SqAfr_phyDat, format = "fasta")
SqAfr_phyDat <- msaConvert(SqAfr type="phangorn::phyDat") write.phyDat(SqAfr_phyDat, "Bioinformatics", format = "fasta")
msaConvert(SqAfr type="phangorn::phyDat") write.phyDat(SqAfr_phyDat, "Bioinformatics", format = "fasta")
msaConvert(SqAfr type ="phangorn::phyDat") write.phyDat(SqAfr_phyDat, "Bioinformatics", format = "fasta")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
source("~/Downloads/Bioinformatics Eli/Homework 5.R")
install.packages("UniprotR")
install.packages(protti)
GenomicAlignments
BiocManager::install("GenomicAlignments")
writeXStringSet(d)
setwd("Users/MariaGarcia/Downloads/Bioinformatics Eli")
setwd("Users/MariaGarcia/Downloads/Bioinformatics")
setwd("Users/MariaGarcia/Downloads/Bioinformatics Eli")
Homo1 <- readDNAStringSet("Homo_sapiens_1")
Homos <- readDNAStringSet("sequences.fasta Midterm.fasta")
Homos <- msa(Homos)
nchar(Homos)
print(Homos, show="complete")
alFreq <- alphabetFrequency(Homos)
alFreq
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
seq1.seqinr <- seqinr::read.fasta("Homo_sapiens_6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
seq1.seqinr <- seqinr::read.fasta("Homo 6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
seq1.seqinr <- seqinr::read.fasta("Homo 6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
seq1.seqinr <- seqinr::read.fasta("Homo 6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
Homo6 <-readDNAStringSet("Homo 6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
Homo6 <-readDNAStringSet("Homo 6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
Mutated <-readDNAStringSet("Homo6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
Mutated <-readDNAStringSet("Homo 6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
Homo_sapiens_6 <-readDNAStringSet("Homo_sapiens_6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
Homo_sapiens_6 <-readDNAStringSet("Homos")
Homo_sapiens_6.seqinr <- seqinr::read.fasta("Homo_sapiens_6")
Homo_sapiens_6.seqinr <- seqinr::read.fasta("Homo")
Homo_sapiens_6.seqinr <- seqinr::read.fasta("Homos")
Homos
Homos_sapiens_6.seqinr <- seqinr::read.fasta("Homos")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
seq1 <- readDNAStringSet("Homo 6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
seq1 <- readDNAStringSet("Homos")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
seq1 <- readDNAStringSet(Homos)
#Ahora aplicamos msa y asigmanos la nueva valiable (opte por la misma)
Homos <- msa(Homos)
#Ahora aplicamos msa y asigmanos la nueva valiable (opte por la misma)
Homos <- msa(Homos)
#Consiguientemente le damos nombre a nuestra sequencias que ya se encuentran agrupadas. En este caso opte por "Homo" ya que nuestras sequencias corresponden a una poblacion de 20 humanos.
Homos <- readDNAStringSet("sequences.fasta Midterm.fasta")
#Consiguientemente le damos nombre a nuestra sequencias que ya se encuentran agrupadas. En este caso opte por "Homo" ya que nuestras sequencias corresponden a una poblacion de 20 humanos.
Homos <- readDNAStringSet("sequences.fasta Midterm.fasta")
#Ahora aplicamos msa y asigmanos la nueva valiable (opte por la misma)
Homos <- msa(Homos)
#Con esta siguiente funcion podemos determinar la longitud de nuestra sequencia (resultado = 642)
nchar(Homos)
#Utilice esta funciones para observar mi alineamiento y asi poder completar el paso 2 de la tarea
print(Homos, show="complete")
alFreq <- alphabetFrequency(Homos)
alFreq
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
seq1 <- readDNAStringSet(Homos)
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
?readDNAStringSet
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
Mutated <- readDNAStringSet("Homo 6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
Mutated <- readDNAStringSet("Homo6")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
Mutated <- readDNAStringSet("Homo6.fasta")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
Mutated <- readDNAStringSet("Homo6.fasta")
#Consiguientemente le damos nombre a nuestra sequencias que ya se encuentran agrupadas. En este caso opte por "Homo" ya que nuestras sequencias corresponden a una poblacion de 20 humanos.
Homos <- readDNAStringSet("sequences.fasta Midterm.fasta")
#Ahora aplicamos msa y asigmanos la nueva valiable (opte por la misma)
Homos <- msa(Homos)
#Consiguientemente le damos nombre a nuestra sequencias que ya se encuentran agrupadas. En este caso opte por "Homo" ya que nuestras sequencias corresponden a una poblacion de 20 humanos.
Homos <- readDNAStringSet("sequences.fasta Midterm.fasta")
# Homo_sapiens 6  es el sujeto que parece presentar la mayoria de mutaciones en los que los nucleotidos han sido reeplazados en varias localizaciones a traves del alineamiento.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene (100% adjession number)
Mutant <-("seqdump.txt")
names(seqs) <-("AY356351.1 Homo sapiens mutant")
Mutant <- msa(seqs)
?default substitution matrix
Mutant.seqinr <- seqinr::read.fasta
seqinr::read.fasta("Mutant")
Mutant.seqinr <- seqinr::read.fasta("sequences.fasta Midterm.fasta")
seqinr::GC(Mutant.seqinr$AY356351.1)
seqinr::GC("sequences.fasta Midterm.fasta".seqinr$U48946.1)
seqinr::GC(Mutant.seqinr$U48946.1)
Mutant.seqinr <- seqinr::read.fasta("Homos")
Mutant.seqinr <- seqinr::read.fasta("Mutant")
Mutant <- Biostrings::translate(Mutant)
Mutant <- msa(seqs)
Mutant <- Biostrings::translate(Mutant)
Mutant6 <- Biostrings::translate(Mutant)
Mutants <- Biostrings::translate(Mutant)
Mutant.seqinr <- Biostrings::translate(Mutant)
Mutant <-readDNAStringSet("seqdump.txt")
Mutant.seqinr <- Biostrings::translate(Mutant)
Mutantx <- Biostrings::translate(Mutant)
print(Mutant)
print(Mutantx)
Mutantx <- msaConvert(Mutantx, type="phangorn::phyDat")
Mutant <- msaConvert(Mutant, type="seqinr::alignment")
Mutantx <- msaConvert(Mutantx, type="seqinr::alignment")
write.phyDat(Mutantx)
Mutantx <- msaConvert(Mutantx, type="phangorn::phyDat")
names(seqs) <-("AY356351.1 Homo sapiens mutant")
Mutant <- msa(seqs)
print(Mutantx)
install.packages(phangorn)
install.packages()
install.packages("phangorn")
install.packages("phangorn")
Homos <- msaConvert(Homos, type="phangorn::phyDat")
write.phyDat(Mutant, "sequences.fasta Midterm.fasta", format = "fasta")
read.phyDat(Homox, format = "fasta")
install.packages("phangorn")
read.phyDat(Homox, format = "fasta")
Homos_phyDat <- msaConvert(Homos, type="phangorn::phyDat")
Homox_phyDat <- msaConvert(Homos, type="phangorn::phyDat")
#Ahora aplicamos msa y asigmanos la nueva valiable (opte por la misma)
Homos <- msa(Homos)
Homox_phyDat <- msaConvert(Homos, type="phangorn::phyDat")
Homox_phyDat
Homox_phyDat <- msaConvert(Mutantx, type="phangorn::phyDat")
print(Mutantx)
write.fasta(Mutantx, Bioinfomatics Eli, open = "w", nbchar = 60, as.string = FALSE)
write.fasta("Mutantx", "Bioinfomatics Eli", open = "w", nbchar = 60, as.string = FALSE)
write.fasta("Mutantx",nbchar = 60, as.string = FALSE)
install.packages("seqinr")
library(seqinr)
write.fasta(Mutantx)
write.fasta(Mutantx,"Users/MariaGarcia/Downloads/Bioinformatics Eli")
write.fasta("Mutantx","Users/MariaGarcia/Downloads/Bioinformatics Eli")
write.fasta(names="Mutantx", sequences=Mutantx, file.out="Mutant.fasta")
Mutantxx <- readDNAStringSet("Mutant.fasta")
Mutant.fasta
Mutantxxx <- read.alignment(Mutant.fasta)
read.alignment(Mutant.fasta)
Mutantx
# Homo_sapiens 6 is the subject that appears to present the majority of mutations in which nucleotides have been replaced in various locations throughout the alignment.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene
#Accession number-AY356351.1
#Here I am translating the Homo 6 sequence into protein
Mutant <-("seqdump.txt")
# Homo_sapiens 6 is the subject that appears to present the majority of mutations in which nucleotides have been replaced in various locations throughout the alignment.
#ran Blast for Homo 6 - Homo sapiens mutant hemoglobin beta chain (HBB) gene
#Accession number-AY356351.1
#Here I am translating the Homo 6 sequence into protein
Mutant <-("seqdump.txt")
names(seqs) <-("AY356351.1 Homo sapiens mutant")
Mutant <- msa(seqs)
print(Mutantx)
#Here I am printing the translated sequence into a fasta file which i saved to my Bioinformatics folder
write.fasta(names="Mutantx", sequences=Mutantx, file.out="Mutant.fasta")
#With this following function we can determine the length of our sequence (result = 642)
nchar(Homos)
Mutantx <- msa(seqs)
print(Mutantx)
print(Mutantx)
Mutant <- msa(seqs)
print(Mutantx)
#Homo_sapiens 6 is the subject that appears to present mutations. Nucleotides have been replaced in various locations throughout the alignment.
#I ran Blast for Homo 6
#Result- Homo sapiens mutant hemoglobin beta chain (HBB) gene
#Accession number-AY356351.1
#Here I am translating the Homo 6 sequence into protein
Mutant <-("seqdump.txt")
Mutant <- msa(seqs)
print(Mutantx)
Mutantx <- Biostrings::translate(Mutant)
Mutant <-readDNAStringSet("seqdump.txt")
Mutantx <- Biostrings::translate(Mutant)
print(Mutantx)
Mutant <- msa(seqs)
Mutant <- msa(seqs)
Mutant <-readDNAStringSet("seqdump.txt")
Mutant.seqinr <- Biostrings::translate(Mutant)
Mutantx <- Biostrings::translate(Mutant)
print(Mutantx)
#Then I named the sequences that are already grouped. In this case I opted for "Homos" since the sequences correspond to a sample of 20 humans.
Homos <- readDNAStringSet("sequences.fasta Midterm.fasta")
#With this following function we can determine the length of our sequence (result = 642)
nchar(Homos)
#Use these functions to observe my alignment so I can complete step 2 of the Homework
print(Homos, show="complete")
alFreq
#Homo_sapiens 6 is the subject that appears to present mutations. Nucleotides have been replaced in various locations throughout the alignment.
#I ran Blast for Homo 6
#Result- Homo sapiens mutant hemoglobin beta chain (HBB) gene
#Accession number-AY356351.1
#Here I am translating the Homo 6 sequence into protein
Mutant <-("seqdump.txt")
names(seqs) <-("AY356351.1 Homo sapiens mutant")
Mutant <- msa(seqs)
Mutant <-readDNAStringSet("seqdump.txt")
Mutant.seqinr <- Biostrings::translate(Mutant)
print(Mutantx)
#Here I am printing the translated sequence into a fasta file which i saved to my Bioinformatics folder
write.fasta(names="Mutantx", sequences=Mutantx, file.out="Mutant.fasta")
